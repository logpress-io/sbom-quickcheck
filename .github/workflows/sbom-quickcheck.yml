name: SBOM Impact QuickCheck

on:
  pull_request:
  push:
    branches: [ main, master ]

permissions:
  contents: read
  pull-requests: write

env:
  SERVICE_NAME: ${{ github.repository }} # utilis√© comme "service"
  MIN_SEVERITY: HIGH                     # seuil d‚Äô√©chec du job (LOW|MEDIUM|HIGH|CRITICAL)

jobs:
  sbom:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # ---------- NPM : g√©n√®re components[] sans installer le projet ----------
      - name: Build npm components (lock v2+)
        if: hashFiles('package-lock.json') != ''
        id: npm_lock_v2
        run: |
          set -e
          if jq -e '.packages' package-lock.json >/dev/null 2>&1; then
            jq '
              .packages
              | to_entries
              | map(select(.key|startswith("node_modules/")))
              | map({
                  name: (.value.name // (.key|split("node_modules/")|last)),
                  version: .value.version
                })
              | unique_by(.name + ":" + .version)
              | map({ecosystem:"npm", name:.name, version:.version})
            ' package-lock.json > components-npm.json
          else
            # fallback lock v1 (besoin d‚Äôun arbre install√©) -> on tente npm ls
            npm ci --prefer-offline --no-audit --no-fund
            npm ls --all --json > npm-tree.json
            jq '
              .. | objects
              | select(has("name") and has("version"))
              | {name, version}
            ' npm-tree.json | jq -s '
              unique_by(.name + ":" + .version)
              | map({ecosystem:"npm", name, version})
            ' > components-npm.json
          fi
          echo "npm_count=$(jq 'length' components-npm.json)" >> $GITHUB_OUTPUT

      # ---------- PyPI : g√©n√®re components[] (√† partir de requirements.txt) ----------
      - name: Setup Python
        if: hashFiles('requirements.txt') != ''
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Build pypi components (requirements.txt)
        if: hashFiles('requirements.txt') != ''
        run: |
          set -e
          # Si requirements.txt √©pingle les versions (==), on peut parser directement
          # Sinon, on r√©sout en installant dans un venv √©ph√©m√®re pour geler les versions.
          python - <<'PY'
import json, os, re, sys, subprocess, tempfile
req = 'requirements.txt'
pairs = []
pin = True
for line in open(req):
    line=line.strip()
    if not line or line.startswith('#'): continue
    m = re.match(r'^([A-Za-z0-9_.\-]+)==([^;]+)$', line)
    if m: pairs.append((m.group(1), m.group(2)))
    else: pin=False
if not pin:
    subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", req])
    out = subprocess.check_output([sys.executable, "-m", "pip", "freeze"], text=True)
    pairs = []
    for l in out.splitlines():
        m = re.match(r'^([A-Za-z0-9_.\-]+)==([^;]+)$', l)
        if m: pairs.append((m.group(1), m.group(2)))
comps = [{"ecosystem":"pypi","name":n,"version":v} for (n,v) in pairs]
open("components-pypi.json","w").write(json.dumps(comps))
PY
          echo "pypi_count=$(jq 'length' components-pypi.json)" >> $GITHUB_OUTPUT

      # ---------- Fusionne les components d√©tect√©s ----------
      - name: Merge components
        run: |
          set -e
          jq -s 'add' \
            <(test -f components-npm.json && cat components-npm.json || echo '[]') \
            <(test -f components-pypi.json && cat components-pypi.json || echo '[]') \
            > components.json
          echo "Total components: $(jq 'length' components.json)"
          test "$(jq 'length' components.json)" -gt 0 || { echo "No components found"; exit 0; }

      # ---------- Appel API : direct OU RapidAPI ----------
      - name: Call SBOM Impact (direct)
        if: env.SBOM_API_URL != '' && secrets.SBOM_API_KEY != ''
        id: call_direct
        env:
          API_URL: ${{ secrets.SBOM_API_URL }}
          API_KEY: ${{ secrets.SBOM_API_KEY }}
          SERVICE: ${{ env.SERVICE_NAME }}
          MIN_SEV: ${{ env.MIN_SEVERITY }}
        run: |
          set -e
          BODY="$(jq -n --arg svc "$SERVICE" --slurpfile comps components.json \
            '{service:$svc, format:"list", components:$comps[0]}')"
          echo "$BODY" | jq '. | {preview:.components|length,service}'
          RESP="$(curl -sS -w '\nHTTP=%{http_code}\n' \
            -H 'content-type: application/json' \
            -H "x-api-key: ${API_KEY}" \
            -d "$BODY" \
            "${API_URL}/sbom/impact?minSeverity=${MIN_SEV}")"
          echo "$RESP" > response.txt
          code="$(sed -n 's/^HTTP=//p' response.txt)"
          test "$code" = "200" || { echo "HTTP $code"; cat response.txt; exit 1; }
          jq '.' response.txt | sed '/^HTTP=/d' > impact.json

      - name: Call SBOM Impact (RapidAPI)
        if: steps.call_direct.outcome == 'skipped' && secrets.RAPIDAPI_KEY != ''
        id: call_rapid
        env:
          RAPIDAPI_KEY: ${{ secrets.RAPIDAPI_KEY }}
          RAPIDAPI_HOST: ${{ secrets.RAPIDAPI_HOST || 'sbom-impact-quickcheck.p.rapidapi.com' }}
          SERVICE: ${{ env.SERVICE_NAME }}
          MIN_SEV: ${{ env.MIN_SEVERITY }}
        run: |
          set -e
          BODY="$(jq -n --arg svc "$SERVICE" --slurpfile comps components.json \
            '{service:$svc, format:"list", components:$comps[0]}')"
          echo "$BODY" | jq '. | {preview:.components|length,service}'
          RESP="$(curl -sS -w '\nHTTP=%{http_code}\n' \
            -H 'content-type: application/json' \
            -H "X-RapidAPI-Key: ${RAPIDAPI_KEY}" \
            -H "X-RapidAPI-Host: ${RAPIDAPI_HOST}" \
            -d "$BODY" \
            "https://${RAPIDAPI_HOST}/sbom/impact?minSeverity=${MIN_SEV}")"
          echo "$RESP" > response.txt
          code="$(sed -n 's/^HTTP=//p' response.txt)"
          test "$code" = "200" || { echo "HTTP $code"; cat response.txt; exit 1; }
          jq '.' response.txt | sed '/^HTTP=/d' > impact.json

      # ---------- √âvalue le r√©sultat & commente la PR ----------
      - name: Summarize & set status
        id: summarize
        run: |
          set -e
          TOTAL=$(jq '.summary.total_components' impact.json)
          HIT=$(jq '.summary.total_impacted' impact.json)
          VER=$(jq -r '.version' impact.json)
          CRIT=$(jq '.summary.counts.CRITICAL' impact.json)
          HIGH=$(jq '.summary.counts.HIGH' impact.json)
          MED=$(jq '.summary.counts.MEDIUM' impact.json)
          LOW=$(jq  '.summary.counts.LOW' impact.json)
          echo "total=$TOTAL"      >> $GITHUB_OUTPUT
          echo "hit=$HIT"          >> $GITHUB_OUTPUT
          echo "version=$VER"      >> $GITHUB_OUTPUT
          echo "crit=$CRIT"        >> $GITHUB_OUTPUT
          echo "high=$HIGH"        >> $GITHUB_OUTPUT
          echo "med=$MED"          >> $GITHUB_OUTPUT
          echo "low=$LOW"          >> $GITHUB_OUTPUT
          echo "=== Impact summary ==="
          jq '.impacted | map({pkg, severity, fixed})' impact.json

          # Fail selon seuil
          case "${MIN_SEVERITY}" in
            CRITICAL) test "$CRIT" -eq 0 || exit 2 ;;
            HIGH)     test "$CRIT" -eq 0 -a "$HIGH" -eq 0 || exit 2 ;;
            MEDIUM)   test "$CRIT" -eq 0 -a "$HIGH" -eq 0 -a "$MED" -eq 0 || exit 2 ;;
            *)        true ;;
          esac

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const impact = JSON.parse(fs.readFileSync('impact.json','utf8'));
            const ver = '${{ steps.summarize.outputs.version }}';
            const total = '${{ steps.summarize.outputs.total }}';
            const hit = '${{ steps.summarize.outputs.hit }}';
            const crit='${{ steps.summarize.outputs.crit }}';
            const high='${{ steps.summarize.outputs.high }}';
            const med='${{ steps.summarize.outputs.med }}';
            const low='${{ steps.summarize.outputs.low }}';
            let lines = [];
            lines.push(`### üîé SBOM Impact QuickCheck (version **${ver}**)`);
            lines.push(`Scann√©: **${total}** composants  ‚Ä¢  Vuln√©rables: **${hit}**`);
            lines.push(`Severities: CRIT ${crit} ¬∑ HIGH ${high} ¬∑ MED ${med} ¬∑ LOW ${low}`);
            if (impact.impacted?.length) {
              const top = impact.impacted.slice(0, 15);
              lines.push('');
              lines.push('| Package | Severity | Fixed |');
              lines.push('|---|---|---|');
              for (const it of top) {
                const [ecoName, ver] = it.pkg.split('@');
                lines.push(`| \`${ecoName}\` @ \`${ver}\` | **${it.severity}** | ${it.fixed ? '`'+it.fixed+'`' : '‚Äî'} |`);
              }
              if (impact.impacted.length > top.length) {
                lines.push(`_‚Ä¶+${impact.impacted.length - top.length} autres_`);
              }
            }
            const body = lines.join('\n');
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body
            });
